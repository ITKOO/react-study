{"ast":null,"code":"import _defineProperty from \"/Users/koojiwon/Desktop/phone-book-itkoo/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/koojiwon/Desktop/phone-book-itkoo/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/koojiwon/Desktop/phone-book-itkoo/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/koojiwon/Desktop/phone-book-itkoo/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/koojiwon/Desktop/phone-book-itkoo/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/koojiwon/Desktop/phone-book-itkoo/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/koojiwon/Desktop/phone-book-itkoo/src/components/PhoneInfo.js\";\nimport React, { Component } from \"react\";\n\nvar PhoneInfo =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PhoneInfo, _Component);\n\n  function PhoneInfo() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PhoneInfo);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PhoneInfo)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      // 수정 버튼을 누르면  editing 값을 true로\n      // true일때 텍스트 형태이던 값을 input 으로 변경\n      editing: false,\n      name: \"\",\n      phone: \"\"\n    };\n\n    _this.handleRemove = function () {\n      var _this$props = _this.props,\n          info = _this$props.info,\n          onRemove = _this$props.onRemove;\n      onRemove(info.id);\n    };\n\n    _this.handleToggleEdit = function () {\n      var editing = _this.state.editing;\n\n      _this.setState({\n        editing: !editing\n      });\n    };\n\n    _this.handleChange = function (e) {\n      var _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n\n      _this.setState(_defineProperty({}, name, value));\n    };\n\n    return _this;\n  }\n\n  _createClass(PhoneInfo, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      // editing 값이 바뀔 때\n      // false -> true\n      var _this$props2 = this.props,\n          info = _this$props2.info,\n          onUpdate = _this$props2.onUpdate;\n\n      if (!prevState.editing && this.state.editing) {\n        this.setState({\n          name: info.name,\n          phone: info.phone\n        });\n      } // true -> false\n\n\n      if (prevState.editing && !this.state.editing) {\n        onUpdate(info.id, {\n          name: this.state.name,\n          phone: this.state.phone\n        });\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (!this.state.editing && !nextState.editing && nextProps.info === this.props.info) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(\"render PhoneInfo \" + this.props.info.id);\n      var style = {\n        border: \"1px solid black\",\n        padding: \"8px\",\n        margin: \"8px\"\n      };\n      var editing = this.state.editing; // 수정일때\n\n      if (editing) {\n        return React.createElement(\"div\", {\n          style: style,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          value: this.state.name,\n          name: \"name\",\n          placeholder: \"\\uC774\\uB984\",\n          onChange: this.handleChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          value: this.state.phone,\n          name: \"phone\",\n          placeholder: \"\\uC804\\uD654\\uBC88\\uD638\",\n          onChange: this.handleChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        })), React.createElement(\"button\", {\n          onClick: this.handleToggleEdit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, \"\\uC801\\uC6A9\"), React.createElement(\"button\", {\n          onClick: this.handleRemove,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, \"\\uC0AD\\uC81C\"));\n      } // info가 undefined일 때는 비구조화 할당을 통해\n      // 내부의 값 받아 올 수 없음 그래서 defaultProps에\n      // info 기본 값 설정\n      // 그냥 일반일때\n\n\n      var _this$props$info = this.props.info,\n          name = _this$props$info.name,\n          phone = _this$props$info.phone;\n      return React.createElement(\"div\", {\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, name)), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, phone), React.createElement(\"button\", {\n        onClick: this.handleToggleEdit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"\\uC801\\uC6A9\"), React.createElement(\"button\", {\n        onClick: this.handleRemove,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"\\uC0AD\\uC81C\"));\n    }\n  }]);\n\n  return PhoneInfo;\n}(Component);\n\nPhoneInfo.defaultProps = {\n  info: {\n    name: \"이름\",\n    phone: \"010-0000-0000\",\n    id: 0\n  }\n};\nexport default PhoneInfo;","map":{"version":3,"sources":["/Users/koojiwon/Desktop/phone-book-itkoo/src/components/PhoneInfo.js"],"names":["React","Component","PhoneInfo","state","editing","name","phone","handleRemove","props","info","onRemove","id","handleToggleEdit","setState","handleChange","e","target","value","prevProps","prevState","onUpdate","nextProps","nextState","console","log","style","border","padding","margin","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nclass PhoneInfo extends Component {\n  static defaultProps = {\n    info: {\n      name: \"이름\",\n      phone: \"010-0000-0000\",\n      id: 0\n    }\n  };\n\n  state = {\n    // 수정 버튼을 누르면  editing 값을 true로\n    // true일때 텍스트 형태이던 값을 input 으로 변경\n    editing: false,\n    name: \"\",\n    phone: \"\"\n  };\n\n  handleRemove = () => {\n    const { info, onRemove } = this.props;\n    onRemove(info.id);\n  };\n\n  // true -> false, false -> true로 반전시키는 함수\n  handleToggleEdit = () => {\n    const { editing } = this.state;\n    this.setState({ editing: !editing });\n  };\n\n  // input에서 onChange 이벤트 발생 시 호출\n  handleChange = e => {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    // editing 값이 바뀔 때\n    // false -> true\n    const { info, onUpdate } = this.props;\n    if (!prevState.editing && this.state.editing) {\n      this.setState({\n        name: info.name,\n        phone: info.phone\n      });\n    }\n    // true -> false\n    if (prevState.editing && !this.state.editing) {\n      onUpdate(info.id, {\n        name: this.state.name,\n        phone: this.state.phone\n      });\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      !this.state.editing &&\n      !nextState.editing &&\n      nextProps.info === this.props.info\n    ) {\n      return false;\n    }\n    return true;\n  }\n  render() {\n    console.log(\"render PhoneInfo \" + this.props.info.id);\n    const style = {\n      border: \"1px solid black\",\n      padding: \"8px\",\n      margin: \"8px\"\n    };\n    const { editing } = this.state;\n\n    // 수정일때\n    if (editing) {\n      return (\n        <div style={style}>\n          <div>\n            <input\n              value={this.state.name}\n              name=\"name\"\n              placeholder=\"이름\"\n              onChange={this.handleChange}\n            />\n          </div>\n\n          <div>\n            <input\n              value={this.state.phone}\n              name=\"phone\"\n              placeholder=\"전화번호\"\n              onChange={this.handleChange}\n            />\n          </div>\n          <button onClick={this.handleToggleEdit}>적용</button>\n          <button onClick={this.handleRemove}>삭제</button>\n        </div>\n      );\n    }\n    // info가 undefined일 때는 비구조화 할당을 통해\n    // 내부의 값 받아 올 수 없음 그래서 defaultProps에\n    // info 기본 값 설정\n    // 그냥 일반일때\n    const { name, phone } = this.props.info;\n    return (\n      <div style={style}>\n        <div>\n          <b>{name}</b>\n        </div>\n        <div>{phone}</div>\n        <button onClick={this.handleToggleEdit}>적용</button>\n        <button onClick={this.handleRemove}>삭제</button>\n      </div>\n    );\n  }\n}\n\nexport default PhoneInfo;\n"]},"metadata":{},"sourceType":"module"}